/**
 * BRIEF App Assignment Model
 */
export type AssignmentPayload = {
    name:string
    courseID:string
    id: string
    description?: string[]
    assets: string
    attempts?: string[]
    minimumScore: number
    questions?: string[]
}

type AssignmentRequired = {
    name?: string
    courseID?: string
}

export class Assignment {
    name:string
    courseID:string
    id: string
    description: string []
    assets: string
    attempts: string[]
    minimumScore: number
    questions: string[]

    /**
     * Constructs an assignment
     * @param {Object} payload Payload containing assignment information
     */

    constructor (payload: AssignmentPayload) {
        this.name = payload.name
        this.courseID = payload.courseID
        this.id = payload.id
        this.description = payload.description ?? []
        this.assets = payload.assets
        // Foreign key array of attempt IDs
        this.attempts = payload.attempts ?? []
        this.minimumScore = payload.minimumScore
        // Array of JavaScript objects containing question information
        // View backend API documentation for more details
        this.questions = payload.questions ?? []
    }

    static HASH_KEY = { name: 'id', type: 'S' }

    /**
     * Function determines if a payload is missing required assignment information
     * @param {Object} payload Payload containing assignments information
     * @returns {String} Missing assignment fields
     */
    static missingFields (payload: AssignmentRequired) {
        let missing = ''
        missing += payload.name ? '' : missing ? ', name' : 'name'
        missing += payload.courseID ? '' : missing ? ', courseID' : 'courseID'
        // Unnecessary, provided and generated by the backend
        // missing += payload.id ? '' : missing ? ', id' : 'id'
        return missing
    }

    /**
     * Function verifies fields in a given payload if they are present
     * @param {any} payload Object containing fields for the assignment model
     * @returns {Boolean | {error: String}} Returns an error message there are any invalid fields. Boolean if nothing invalid
     */
    static verifyFields (payload: any): false | {error: string} {
        const types = {
            string: ['id', 'name', 'courseID']
        }
        let error: boolean | {error: string} = false
        // check that fields passed in are the correct type
        for (const [key, value] of Object.entries(types)) {
            value.forEach(field => {
                const typeOfField = typeof (payload[field])
                // if field exists in payload and the type of payload is key
                if (typeOfField !== 'undefined' && typeOfField !== key && payload[field]) error = { error: `Invalid type of ${field}` }
            })
        }
        return error
    }
}
